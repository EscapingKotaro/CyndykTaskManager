from django.db import models
from django.core.validators import MinValueValidator
from decimal import Decimal
from django.conf import settings

class GameRelease(models.Model):
    PLATFORM_CHOICES = [
        ('PS4', 'PlayStation 4'),
        ('PS5', 'PlayStation 5'),
        ('SWITCH', 'Nintendo Switch'),
        ('SWITCH2', 'Nintendo Switch 2'),
        ('XBOX_ONE', 'Xbox One'),
        ('XBOX_SERIES', 'Xbox Series X/S'),
    ]
    
    MARKETPLACE_CHOICES = [
        ('AVITO', 'Avito'),
        ('DIFMARK', 'Difmark'),
        ('WILDBERRIES', 'Wildberries'),
        ('DIGISELLER', 'Digiseller'),
    ]
    
    LANGUAGE_CHOICES = [
        ('RUSSIAN', '–†—É—Å—Å–∫–∏–π'),
        ('ENGLISH', '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π'),
    ]
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    title = models.CharField(max_length=200, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã')
    icon = models.ImageField(upload_to='game_icons/', blank=True, null=True, verbose_name='–ò–∫–æ–Ω–∫–∞ –∏–≥—Ä—ã')
    release_date = models.DateField(verbose_name='–î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞')
    is_published = models.BooleanField(default=False, verbose_name='–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')
    
    # –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã (–º–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º —á–µ—Ä–µ–∑ JSON)
    platforms = models.JSONField(
        default=list,
        verbose_name='–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã',
        help_text='–°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º: ["PS4", "PS5", "Switch"]'
    )
    
    # –ü–ª–æ—â–∞–¥–∫–∏ (–º–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º —á–µ—Ä–µ–∑ JSON)
    marketplaces = models.JSONField(
        default=["Avito", "Difmark", "Wildberries", "Digiseller"],
        verbose_name='–ü–ª–æ—â–∞–¥–∫–∏',
        help_text='–°–ø–∏—Å–æ–∫ –ø–ª–æ—â–∞–¥–æ–∫: ["Avito", "Digiseller"]'
    )
    
    # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (–º–Ω–æ–≥–∏–µ –∫–æ –º–Ω–æ–≥–∏–º —á–µ—Ä–µ–∑ JSON)
    languages = models.JSONField(
        default=list,
        verbose_name='–õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏',
        help_text='–°–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤: ["–†—É—Å—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"]'
    )
    
    # –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º –∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º (JSON –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≤—è–∑–æ–∫ –ø–ª–æ—â–∞–¥–∫–∞-–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã)
    marketplace_platforms = models.JSONField(
        default=dict,
        verbose_name='–ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ –ø–ª–æ—â–∞–¥–∫–∞–º',
        help_text='–§–æ—Ä–º–∞—Ç: {"Avito": ["PS4", "PS5"], "Digiseller": ["Switch"]}'
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    description = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã')
    price = models.DecimalField(
        max_digits=10, 
        decimal_places=2, 
        default=0,
        verbose_name='–¶–µ–Ω–∞',
        validators=[MinValueValidator(Decimal('0'))]
    )
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    updated_at = models.DateTimeField(auto_now=True, verbose_name='–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    
    class Meta:
        verbose_name = '–†–µ–ª–∏–∑ –∏–≥—Ä—ã'
        verbose_name_plural = '–†–µ–ª–∏–∑—ã –∏–≥—Ä'
        ordering = ['release_date', 'title']
        indexes = [
            models.Index(fields=['release_date']),
            models.Index(fields=['is_published']),
        ]
    
    def __str__(self):
        return f"{self.title} ({self.release_date})"
    
    def get_platforms_list(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        return self.platforms if isinstance(self.platforms, list) else []
    
    def get_marketplaces_list(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–ª–æ—â–∞–¥–æ–∫"""
        return self.marketplaces if isinstance(self.marketplaces, list) else []
    
    def get_languages_list(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤"""
        return self.languages if isinstance(self.languages, list) else []
    
    def get_marketplace_platforms_dict(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–ª–æ—â–∞–¥–∫–∞->–ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        return self.marketplace_platforms or {}
    
    def is_released(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤—ã—à–µ–ª –ª–∏ —É–∂–µ —Ä–µ–ª–∏–∑"""
        from django.utils import timezone
        return self.release_date <= timezone.now().date()
    
    def days_until_release(self):
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ —Ä–µ–ª–∏–∑–∞"""
        from django.utils import timezone
        from datetime import date
        today = timezone.now().date()
        delta = self.release_date - today
        return delta.days if delta.days >= 0 else 0
    
    def get_all_marketplaces(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–ª–æ—â–∞–¥–∫–∏"""
        return [choice[0] for choice in self.MARKETPLACE_CHOICES]
    
    def get_platform_icon(self, platform):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        icons = {
            'PS4': 'üéÆ',
            'PS5': 'üéÆ',
            'SWITCH': 'üéÆ', 
            'SWITCH2': 'üéÆ',
            'XBOX_ONE': 'üéÆ',
            'XBOX_SERIES': 'üéÆ',
        }
        return icons.get(platform, 'üéÆ')
    
    def get_marketplace_icon(self, marketplace):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –ø–ª–æ—â–∞–¥–∫–∏"""
        icons = {
            'AVITO': 'platform_icons/avito.jpg',
            'DIFMARK': 'platform_icons/difmark.png', 
            'WILDBERRIES': 'platform_icons/wb.jpg',
            'DIGISELLER': 'platform_icons/diga.png',
        }
        return icons.get(marketplace, '')
    def get_all_marketplaces_display(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Å–µ–º –ø–ª–æ—â–∞–¥–∫–∞–º —Å –∏–∫–æ–Ω–∫–∞–º–∏"""
        MARKETPLACE_ICONS = {
            'AVITO': 'platform_icons/avito.jpg',
            'DIFMARK': 'platform_icons/difmark.png', 
            'WILDBERRIES': 'platform_icons/wb.jpg',
            'DIGISELLER': 'platform_icons/diga.png',
        }
        #
        all_marketplaces = [choice[0] for choice in self.MARKETPLACE_CHOICES]
        #
        marketplaces = []
        i=0
        for marketplace in ['AVITO', 'DIFMARK', 'WILDBERRIES', 'DIGISELLER']:
            icon_path = MARKETPLACE_ICONS.get(marketplace)
            icon_url = f"{icon_path}" if icon_path else ""
            
            marketplaces.append({
                'code': all_marketplaces[i][1],
                'name': dict(self.MARKETPLACE_CHOICES).get(marketplace, marketplace),  # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ marketplace
                'is_selected': getattr(self, f'marketplace_{marketplace.lower()}', False),
                'icon_url': icon_url
            })
            i+=1
        return marketplaces
    def toggle_platform_publication(self, marketplace, platform):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ"""
        publications = self.get_marketplace_platforms_dict()
        
        if marketplace not in publications:
            publications[marketplace] = []
        
        if platform in publications[marketplace]:
            publications[marketplace].remove(platform)
            # –ï—Å–ª–∏ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –ø–ª–æ—â–∞–¥–∫—É
            if not publications[marketplace]:
                del publications[marketplace]
        else:
            publications[marketplace].append(platform)
        
        self.marketplace_platforms = publications
        self.save()
        return platform in publications.get(marketplace, [])

    def get_marketplace_status(self, marketplace):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–æ—â–∞–¥–∫–∏"""
        publications = self.get_marketplace_platforms_dict()
        marketplace_platforms = publications.get(marketplace, [])
        all_platforms = self.get_platforms_list()
        
        if not marketplace_platforms:
            return 'not_published'
        elif len(marketplace_platforms) == len(all_platforms):
            return 'fully_published'
        else:
            return 'partially_published'

    def get_platform_publication_status(self, marketplace, platform):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ"""
        publications = self.get_marketplace_platforms_dict()
        return platform in publications.get(marketplace, [])
    def get_marketplace_status_display(self, status):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        status_map = {
            'not_published': '–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ',
            'partially_published': '–ß–∞—Å—Ç–∏—á–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ', 
            'fully_published': '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'
        }
        return status_map.get(status, '–ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ')