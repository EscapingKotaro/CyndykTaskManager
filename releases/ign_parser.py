import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import re
from django.utils import timezone
from .models import GameRelease

class IGNReleaseParser:
    """
    –ü–∞—Ä—Å–µ—Ä —Ä–µ–ª–∏–∑–æ–≤ –∏–≥—Ä —Å IGN.com
    """
    
    BASE_URL = "https://www.ign.com/upcoming/games"
    
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        })
    
    def parse_releases(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–ª–∏–∑–æ–≤
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∏–≥—Ä, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ –ë–î
        """
        print("üï∑Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ IGN...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            response = self.session.get(self.BASE_URL, timeout=10)
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º HTML
            soup = BeautifulSoup(response.content, 'html.parser')
            
            # –ò—â–µ–º –±–ª–æ–∫–∏ —Å –∏–≥—Ä–∞–º–∏
            games_data = self._extract_games_data(soup)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            new_games = self._save_to_database(games_data)
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_games)} –Ω–æ–≤—ã—Ö –∏–≥—Ä")
            return new_games
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            return []
    
    def _extract_games_data(self, soup):
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–∞—Ö –∏–∑ HTML
        """
        games_data = []
        
        # –ò—â–µ–º –±–ª–æ–∫–∏ —Å –∏–≥—Ä–∞–º–∏ (–º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤)
        game_cards = soup.find_all('div', class_=re.compile(r'game|release|item', re.I))
        
        for card in game_cards:
            try:
                game_data = self._parse_game_card(card)
                if game_data and self._is_valid_game(game_data):
                    games_data.append(game_data)
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä—ã: {e}")
                continue
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
        if not games_data:
            games_data = self._fallback_parsing(soup)
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(games_data)} –∏–≥—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return games_data
    
    def _parse_game_card(self, card):
        """
        –ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∏–≥—Ä—ã
        """
        game_data = {}
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
        title_elem = (card.find('h2') or card.find('h3') or 
                     card.find('a', class_=re.compile(r'title|name', re.I)))
        if title_elem:
            game_data['title'] = title_elem.get_text().strip()
        
        # –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞
        date_elem = card.find('span', class_=re.compile(r'date|release', re.I))
        if date_elem:
            game_data['release_date'] = self._parse_date(date_elem.get_text().strip())
        
        # –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
        platforms_elem = card.find('span', class_=re.compile(r'platform|console', re.I))
        if platforms_elem:
            game_data['platforms'] = self._parse_platforms(platforms_elem.get_text().strip())
        
        # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if not game_data.get('title') or not game_data.get('release_date'):
            return None
            
        return game_data
    
    def _fallback_parsing(self, soup):
        """
        –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
        """
        games_data = []
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö JSON-LD
        script_tags = soup.find_all('script', type='application/ld+json')
        for script in script_tags:
            try:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ JSON-LD –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                pass
            except:
                pass
        
        # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –¥—Ä—É–≥–∏–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
        items = soup.find_all('div', class_=re.compile(r'item|card|product', re.I))
        for item in items:
            try:
                title_elem = item.find(['h1', 'h2', 'h3', 'h4'])
                date_elem = item.find(text=re.compile(r'202[4-9]|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec', re.I))
                
                if title_elem and date_elem:
                    game_data = {
                        'title': title_elem.get_text().strip(),
                        'release_date': self._parse_date(date_elem),
                        'platforms': ['PS5', 'XBOX_SERIES', 'PC']  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                    }
                    games_data.append(game_data)
                    
            except Exception as e:
                continue
        
        return games_data
    
    def _parse_date(self, date_text):
        """
        –ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç datetime
        """
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª–æ–≤–∞
            clean_date = re.sub(r'[^\w\s,\.]', '', date_text)
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            date_formats = [
                '%B %d, %Y',  # October 15, 2024
                '%b %d, %Y',  # Oct 15, 2024  
                '%Y-%m-%d',   # 2024-10-15
                '%m/%d/%Y',   # 10/15/2024
                '%d.%m.%Y',   # 15.10.2024
            ]
            
            for fmt in date_formats:
                try:
                    return datetime.strptime(clean_date.strip(), fmt).date()
                except ValueError:
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–æ—Å—å, —Å—Ç–∞–≤–∏–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ 3 –º–µ—Å—è—Ü–∞
            return timezone.now().date() + timedelta(days=90)
            
        except Exception:
            # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –¥–∞—Ç–∞ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
            return timezone.now().date() + timedelta(days=90)
    
    def _parse_platforms(self, platforms_text):
        """
        –ü–∞—Ä—Å–∏—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        """
        platforms = []
        text_lower = platforms_text.lower()
        
        # –ú–∞–ø–ø–∏–Ω–≥ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        platform_map = {
            'ps4': 'PS4',
            'ps5': 'PS5', 
            'playstation 4': 'PS4',
            'playstation 5': 'PS5',
            'xbox one': 'XBOX_ONE',
            'xbox series': 'XBOX_SERIES',
            'switch': 'SWITCH',
            'nintendo switch': 'SWITCH',
        }
        
        for key, platform in platform_map.items():
            if key in text_lower:
                platforms.append(platform)
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        platforms = list(set(platforms))
        
        # –ï—Å–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å, —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
        if not platforms:
            platforms = ['PS5']
            
        return platforms
    
    def _is_valid_game(self, game_data):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –¥–∞—Ç–∞
        if not game_data.get('title') or not game_data.get('release_date'):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º –∏–ª–∏ –Ω–µ –æ—á–µ–Ω—å –¥–∞–ª–µ–∫–æ–º –ø—Ä–æ—à–ª–æ–º (–¥–æ 1 –≥–æ–¥–∞)
        max_past_date = timezone.now().date() - timedelta(days=365)
        if game_data['release_date'] < max_past_date:
            return False
            
        return True
    
    def _save_to_database(self, games_data):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä—ã –≤ –ë–î, —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
        """
        new_games = []
        
        for game_data in games_data:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∏–≥—Ä–∞
                existing_game = GameRelease.objects.filter(
                    title__iexact=game_data['title']
                ).first()
                
                if existing_game:
                    print(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–≥—Ä—É: {game_data['title']}")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
                game = GameRelease(
                    title=game_data['title'],
                    release_date=game_data['release_date'],
                    platforms=game_data.get('platforms', ['PS5', 'PC']),
                    marketplaces=[],  # –ü–æ–∫–∞ –ø—É—Å—Ç—ã–µ –ø–ª–æ—â–∞–¥–∫–∏
                    languages=['ENGLISH', 'RUSSIAN'],  # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ —è–∑—ã–∫–∏
                    marketplace_platforms={},
                    description=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ IGN. –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞: {game_data['release_date']}",
                    is_published=False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
                )
                
                game.save()
                new_games.append(game)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞: {game_data['title']}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã {game_data.get('title')}: {e}")
                continue
        
        return new_games


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
def run_parser():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    parser = IGNReleaseParser()
    return parser.parse_releases()

def get_parser_stats():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º –≤ –ë–î
    """
    total_games = GameRelease.objects.count()
    upcoming_games = GameRelease.objects.filter(
        release_date__gte=timezone.now().date()
    ).count()
    
    return {
        'total_games': total_games,
        'upcoming_games': upcoming_games
    }