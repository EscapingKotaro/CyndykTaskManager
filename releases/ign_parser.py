from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import time
import re
from datetime import datetime, timedelta
from django.utils import timezone
from .models import GameRelease

class IGNReleaseParser:
    """
    –ü–∞—Ä—Å–µ—Ä —Ä–µ–ª–∏–∑–æ–≤ –∏–≥—Ä —Å IGN.com —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Selenium
    """
    
    BASE_URL = "https://www.ign.com/upcoming/games"
    
    def __init__(self):
        self.setup_driver()
        self.stats = {
            'total_pages_loaded': 0,
            'game_links_found': 0,
            'game_cards_found': 0,
            'games_parsed': 0,
            'games_saved': 0,
            'errors': 0
        }
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome driver"""
        chrome_options = Options()
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        
        self.driver = webdriver.Chrome(options=chrome_options)
        self.wait = WebDriverWait(self.driver, 15)
    
    def parse_releases(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–ª–∏–∑–æ–≤
        """
        print("üï∑Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º Selenium –ø–∞—Ä—Å–µ—Ä IGN...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(self.BASE_URL)
            self.stats['total_pages_loaded'] += 1
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            time.sleep(5)
            
            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –¥–µ–±–∞–≥–∞
            self.driver.save_screenshot('ign_page.png')
            print("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'ign_page.png'")
            
            # –ü–æ–ª—É—á–∞–µ–º HTML –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            page_source = self.driver.page_source
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML –¥–ª—è –¥–µ–±–∞–≥–∞
            with open('ign_page.html', 'w', encoding='utf-8') as f:
                f.write(page_source)
            print("üíæ HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ 'ign_page.html'")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            self._analyze_page_structure(page_source)
            
            # –ü–∞—Ä—Å–∏–º –∏–≥—Ä—ã
            games_data = self._parse_games_from_page()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            new_games = self._save_to_database(games_data)
            
            self.stats['games_saved'] = len(new_games)
            self._print_stats()
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_games)} –Ω–æ–≤—ã—Ö –∏–≥—Ä")
            return new_games
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            self.stats['errors'] += 1
            self._print_stats()
            return []
        finally:
            self.driver.quit()
    
    def _analyze_page_structure(self, page_source):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –¥–µ–±–∞–≥–∞"""
        soup = BeautifulSoup(page_source, 'html.parser')
        
        print("\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –°–¢–†–ê–ù–ò–¶–´:")
        print(f"üìÑ –î–ª–∏–Ω–∞ HTML: {len(page_source)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        game_links = soup.find_all('a', href=re.compile(r'/games/|/reviews/'))
        self.stats['game_links_found'] = len(game_links)
        print(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–≥—Ä—ã: {len(game_links)}")
        
        # –ò—â–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–≥—Ä
        game_cards = soup.find_all(['div', 'article'], class_=re.compile(r'game|item|card|product', re.I))
        self.stats['game_cards_found'] = len(game_cards)
        print(f"üéÆ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–≥—Ä: {len(game_cards)}")
        
        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫:")
        for i, link in enumerate(game_links[:5]):
            href = link.get('href', '')
            text = link.get_text(strip=True)
            print(f"  {i+1}. {text} -> {href}")
        
        # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
        print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫:")
        for i, card in enumerate(game_cards[:5]):
            text = card.get_text(strip=True)[:100] + "..." if len(card.get_text(strip=True)) > 100 else card.get_text(strip=True)
            print(f"  {i+1}. {text}")
    
    def _parse_games_from_page(self):
        """–ü–∞—Ä—Å–∏—Ç –∏–≥—Ä—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏—Å–ø–æ–ª—å–∑—É—è Selenium"""
        games_data = []
        
        print("\nüéØ –ü–ê–†–°–ò–ù–ì –ò–ì–†:")
        
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä
            selectors = [
                "//a[contains(@href, '/games/')]",
                "//article[contains(@class, 'game')]",
                "//div[contains(@class, 'game-item')]",
                "//figure//a",  # –¢–≤–æ–π xPath
                "//*[@id='main-content']//a",
            ]
            
            for selector in selectors:
                try:
                    elements = self.driver.find_elements(By.XPATH, selector)
                    print(f"üîé –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                    
                    if elements:
                        for i, element in enumerate(elements[:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª—è —Ç–µ—Å—Ç–∞
                            try:
                                game_data = self._parse_game_element(element)
                                if game_data and self._is_valid_game(game_data):
                                    games_data.append(game_data)
                                    self.stats['games_parsed'] += 1
                                    print(f"  ‚úÖ –ò–≥—Ä–∞ {i+1}: {game_data['title']}")
                            except Exception as e:
                                print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {i+1}: {e}")
                                continue
                        
                        break  # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                        
                except Exception as e:
                    print(f"üîé –°–µ–ª–µ–∫—Ç–æ—Ä '{selector}': –æ—à–∏–±–∫–∞ - {e}")
                    continue
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ XPath, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ CSS
            if not games_data:
                css_selectors = [
                    "a[href*='/games/']",
                    ".game-item",
                    ".item-game",
                    "article.game",
                ]
                
                for css_selector in css_selectors:
                    try:
                        elements = self.driver.find_elements(By.CSS_SELECTOR, css_selector)
                        print(f"üîé CSS —Å–µ–ª–µ–∫—Ç–æ—Ä '{css_selector}': –Ω–∞–π–¥–µ–Ω–æ {len(elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        
                        if elements:
                            for i, element in enumerate(elements[:10]):
                                try:
                                    game_data = self._parse_game_element(element)
                                    if game_data and self._is_valid_game(game_data):
                                        games_data.append(game_data)
                                        self.stats['games_parsed'] += 1
                                        print(f"  ‚úÖ –ò–≥—Ä–∞ {i+1}: {game_data['title']}")
                                except Exception as e:
                                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {i+1}: {e}")
                                    continue
                            
                            break
                            
                    except Exception as e:
                        print(f"üîé CSS —Å–µ–ª–µ–∫—Ç–æ—Ä '{css_selector}': –æ—à–∏–±–∫–∞ - {e}")
                        continue
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–≥—Ä: {e}")
            self.stats['errors'] += 1
        
        return games_data
    
    def _parse_game_element(self, element):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä—ã"""
        try:
            game_data = {}
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            element_text = element.text.strip()
            if not element_text or len(element_text) < 2:
                return None
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã - –±–µ—Ä–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
            game_data['title'] = element_text.split('\n')[0] if '\n' in element_text else element_text
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É
            href = element.get_attribute('href')
            if href:
                game_data['url'] = href
            
            # –î–∞—Ç–∞ —Ä–µ–ª–∏–∑–∞ - –ø–æ–∫–∞ —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
            game_data['release_date'] = timezone.now().date() + timedelta(days=60)
            
            # –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã - –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
            game_data['platforms'] = ['PS5']
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            title_attr = element.get_attribute('title')
            if title_attr and len(title_attr) > len(game_data['title']):
                game_data['title'] = title_attr
            
            return game_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
            return None
    
    def _is_valid_game(self, game_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã"""
        if not game_data.get('title'):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º—É—Å–æ—Ä
        title = game_data['title']
        if len(title) < 2 or len(title) > 200:
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        exclude_words = ['ign', 'game', 'review', 'news', 'trailer', 'video']
        if any(word in title.lower() for word in exclude_words):
            return False
            
        return True
    
    def _save_to_database(self, games_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä—ã –≤ –ë–î, —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ"""
        new_games = []
        
        for game_data in games_data:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∏–≥—Ä–∞
                existing_game = GameRelease.objects.filter(
                    title__iexact=game_data['title']
                ).first()
                
                if existing_game:
                    print(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–≥—Ä—É: {game_data['title']}")
                    continue
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
                game = GameRelease(
                    title=game_data['title'][:200],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    release_date=game_data['release_date'],
                    platforms=game_data.get('platforms', ['PS5', 'PC']),
                    marketplaces=[],  # –ü–æ–∫–∞ –ø—É—Å—Ç—ã–µ –ø–ª–æ—â–∞–¥–∫–∏
                    languages=['ENGLISH', 'RUSSIAN'],
                    marketplace_platforms={},
                    description=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ IGN. {game_data.get('url', '')}",
                    is_published=False
                )
                
                game.save()
                new_games.append(game)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞: {game_data['title']}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã {game_data.get('title')}: {e}")
                self.stats['errors'] += 1
                continue
        
        return new_games
    
    def _print_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê:")
        print(f"   üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {self.stats['total_pages_loaded']}")
        print(f"   üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–≥—Ä—ã: {self.stats['game_links_found']}")
        print(f"   üéÆ –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–≥—Ä: {self.stats['game_cards_found']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –∏–≥—Ä: {self.stats['games_parsed']}")
        print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {self.stats['games_saved']}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def run_parser():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä"""
    parser = IGNReleaseParser()
    return parser.parse_releases()

def get_parser_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º –≤ –ë–î"""
    total_games = GameRelease.objects.count()
    upcoming_games = GameRelease.objects.filter(
        release_date__gte=timezone.now().date()
    ).count()
    published_games = GameRelease.objects.filter(is_published=True).count()
    
    return {
        'total_games': total_games,
        'upcoming_games': upcoming_games,
        'published_games': published_games
    }