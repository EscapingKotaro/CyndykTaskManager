import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
import time
import re
import os
from datetime import datetime, timedelta
from django.utils import timezone
from django.core.files import File
from tempfile import NamedTemporaryFile
from .models import GameRelease

class IGNReleaseParser:
    """
    –ü–∞—Ä—Å–µ—Ä —Ä–µ–ª–∏–∑–æ–≤ –∏–≥—Ä —Å IGN.com - —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏
    """
    
    BASE_URL = "https://www.ign.com/upcoming/games"
    
    def __init__(self):
        self.setup_driver()
        self.stats = {
            'total_pages_loaded': 0,
            'game_links_found': 0,
            'games_parsed': 0,
            'games_saved': 0,
            'invalid_platform_skipped': 0,
            'too_far_skipped': 0,
            'errors': 0
        }
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç (–±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏)
        self.today = timezone.now().date()
        self.max_date = self.today + timedelta(days=14)
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Chrome driver"""
        chrome_options = Options()
        chrome_options.add_argument("--headless=new")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--window-size=1920,1080")
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        
        self.driver = webdriver.Chrome(options=chrome_options)
    
    def parse_releases(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–ª–∏–∑–æ–≤ - —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏
        """
        print("üï∑Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º Selenium –ø–∞—Ä—Å–µ—Ä IGN...")
        print(f"üìÖ –ò—â–µ–º –∏–≥—Ä—ã —Å {self.today} –ø–æ {self.max_date}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
            self.driver.get(self.BASE_URL)
            self.stats['total_pages_loaded'] += 1
            
            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            time.sleep(5)
            
            # –ü–∞—Ä—Å–∏–º –∏–≥—Ä—ã
            games_data = self._parse_games_from_page()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            new_games = self._save_to_database(games_data)
            
            self.stats['games_saved'] = len(new_games)
            self._print_stats()
            
            print(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_games)} –Ω–æ–≤—ã—Ö –∏–≥—Ä")
            return new_games
            
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
            self.stats['errors'] += 1
            self._print_stats()
            return []
        finally:
            self.driver.quit()
    
    def _parse_games_from_page(self):
        """–ü–∞—Ä—Å–∏—Ç –∏–≥—Ä—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã - —Ç–æ–ª—å–∫–æ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏"""
        games_data = []
        
        print("\nüéØ –ü–ê–†–°–ò–ù–ì –ò–ì–†:")
        
        try:
            # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–≥—Ä—ã
            game_links = self.driver.find_elements(By.XPATH, "//a[contains(@href, '/games/')]")
            print(f"üîé –ù–∞–π–¥–µ–Ω–æ {len(game_links)} —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–≥—Ä—ã")
            
            for i, element in enumerate(game_links):
                try:
                    game_data = self._parse_game_element(element)
                    if not game_data:
                        continue
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∏–≥—Ä–∞ –ø–æ –¥–∞—Ç–µ
                    if self._is_game_in_time_range(game_data):
                        if self._is_valid_game(game_data):
                            games_data.append(game_data)
                            self.stats['games_parsed'] += 1
                            print(f"    ‚úÖ {game_data['title']} - {game_data['release_date']} - {game_data['platforms']}")
                        else:
                            print(f"    ‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã): {game_data['title']} - {game_data.get('platforms', [])}")
                            self.stats['invalid_platform_skipped'] += 1
                    else:
                        print(f"    ‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–¥–∞—Ç–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞): {game_data['title']} - {game_data['release_date']}")
                        self.stats['too_far_skipped'] += 1
                        
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ {i+1}: {e}")
                    continue
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–≥—Ä: {e}")
            self.stats['errors'] += 1
        
        return games_data
    
    def _is_game_in_time_range(self, game_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∏–≥—Ä–∞ –≤—ã—Ö–æ–¥–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏"""
        release_date = game_data.get('release_date')
        if not release_date:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å–µ–≥–æ–¥–Ω—è + 14 –¥–Ω–µ–π
        return self.today <= release_date <= self.max_date
    
    def _parse_game_element(self, element):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–≥—Ä—ã"""
        try:
            game_data = {}
            element_html = element.get_attribute('outerHTML')
            soup = BeautifulSoup(element_html, 'html.parser')
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            title_elem = soup.find('figcaption', class_=re.compile(r'tile-title'))
            if title_elem:
                game_data['title'] = title_elem.get_text(strip=True)
            else:
                element_text = element.text.strip()
                lines = [line.strip() for line in element_text.split('\n') if line.strip()]
                if lines:
                    game_data['title'] = lines[0]
            
            if not game_data.get('title'):
                return None
            
            # –î–∞—Ç–∞
            date_elem = soup.find('div', class_=re.compile(r'tile-meta'))
            if date_elem:
                date_text = date_elem.get_text(strip=True)
                game_data['release_date'] = self._parse_date(date_text)
            else:
                element_text = element.text.strip()
                date_match = re.search(r'([A-Za-z]{3,10}\s+\d{1,2},\s+\d{4})', element_text)
                if date_match:
                    game_data['release_date'] = self._parse_date(date_match.group(1))
                else:
                    # –ï—Å–ª–∏ –¥–∞—Ç—É –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
                    return None
            
            # –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
            platforms_elem = soup.find('div', class_=re.compile(r'platforms'))
            if platforms_elem:
                platforms = self._parse_platforms_from_element(platforms_elem)
                game_data['platforms'] = platforms
            else:
                game_data['platforms'] = []
            
            # –ö–∞—Ä—Ç–∏–Ω–∫–∞
            img_elem = soup.find('img')
            if img_elem:
                img_src = img_elem.get('src')
                if img_src:
                    game_data['image_url'] = img_src
            
            # URL
            href = element.get_attribute('href')
            if href:
                if href.startswith('/'):
                    href = 'https://www.ign.com' + href
                game_data['url'] = href
            
            return game_data
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
            return None
    
    def _parse_platforms_from_element(self, platforms_elem):
        """–ü–∞—Ä—Å–∏—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ HTML —ç–ª–µ–º–µ–Ω—Ç–∞ - —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –Ω–∞–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
        platforms = []
        
        # –ò—â–µ–º –∏–∫–æ–Ω–∫–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        platform_icons = platforms_elem.find_all(['span', 'img'], class_=re.compile(r'platform|icon', re.I))
        
        # –ù–∞—à–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        ALLOWED_PLATFORMS = ['PS4', 'PS5', 'SWITCH', 'SWITCH2', 'XBOX_ONE', 'XBOX_SERIES']
        
        for icon in platform_icons:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã –∏ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
            class_str = ' '.join(icon.get('class', []))
            alt_text = icon.get('alt', '').lower()
            src = icon.get('src', '').lower()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
            platform_map = {
                'ps4': 'PS4',
                'playstation-4': 'PS4',
                'ps5': 'PS5', 
                'playstation-5': 'PS5',
                'xbox-one': 'XBOX_ONE',
                'xbox-series': 'XBOX_SERIES',
                'switch': 'SWITCH',
                'nintendo': 'SWITCH'
            }
            
            for key, platform in platform_map.items():
                if (key in class_str or key in alt_text or key in src) and platform in ALLOWED_PLATFORMS:
                    platforms.append(platform)
                    break
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        platforms = list(set(platforms))
        
        return platforms
    
    def _parse_date(self, date_text):
        """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç datetime"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
            clean_date = re.sub(r'[^\w\s,]', '', date_text.strip())
            
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            date_formats = [
                '%b %d, %Y',  # Oct 1, 2025
                '%B %d, %Y',  # October 1, 2025
            ]
            
            for fmt in date_formats:
                try:
                    parsed_date = datetime.strptime(clean_date, fmt).date()
                    return parsed_date
                except ValueError:
                    continue
            
            return None
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã '{date_text}': {e}")
            return None
    
    def _download_image(self, image_url, game_title):
        """–°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä—ã"""
        try:
            if not image_url:
                return None
                
            # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            clean_title = re.sub(r'[^\w\s-]', '', game_title)
            clean_title = re.sub(r'\s+', '_', clean_title)
            filename = f"{clean_title}.jpg"
            
            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            response = requests.get(image_url, timeout=10)
            response.raise_for_status()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with NamedTemporaryFile(delete=False, suffix='.jpg') as temp_file:
                temp_file.write(response.content)
                temp_file.flush()
                
                return temp_file.name
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è {game_title}: {e}")
            return None
    
    def _is_valid_game(self, game_data):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã"""
        if not game_data.get('title'):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º—É—Å–æ—Ä
        title = game_data['title']
        if len(title) < 2 or len(title) > 200:
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –º—É—Å–æ—Ä–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        exclude_words = ['ign', 'game', 'review', 'news', 'trailer', 'video', 'upcoming']
        if any(word in title.lower() for word in exclude_words):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –Ω–∞—à–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        platforms = game_data.get('platforms', [])
        allowed_platforms = ['PS4', 'PS5', 'SWITCH', 'SWITCH2', 'XBOX_ONE', 'XBOX_SERIES']
        has_our_platforms = any(platform in allowed_platforms for platform in platforms)
        
        if not has_our_platforms:
            return False
            
        return True
    
    def _save_to_database(self, games_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–≥—Ä—ã –≤ –ë–î, —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ"""
        new_games = []
        
        for game_data in games_data:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–∞—è –∏–≥—Ä–∞
                existing_game = GameRelease.objects.filter(
                    title__iexact=game_data['title']
                ).first()
                
                if existing_game:
                    #print(f"‚è© –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–≥—Ä—É: {game_data['title']}")
                    continue
                
                # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image_path = None
                if game_data.get('image_url'):
                    image_path = self._download_image(game_data['image_url'], game_data['title'])
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É
                game = GameRelease(
                    title=game_data['title'][:200],
                    release_date=game_data['release_date'],
                    platforms=game_data.get('platforms', []),
                    # –í—Å–µ –ø–ª–æ—â–∞–¥–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    marketplaces=['AVITO', 'DIFMARK', 'WILDBERRIES', 'DIGISELLER'],
                    languages=['UNKNOW'],
                    marketplace_platforms={},  # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤–º–µ—Å—Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
                    description=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑ IGN. {game_data.get('url', '')}",
                    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ
                    is_published=True
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
                game.save()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–∫–∞—á–∞–ª–∏
                if image_path and os.path.exists(image_path):
                    try:
                        with open(image_path, 'rb') as img_file:
                            game.icon.save(f"{game.id}_{game.title[:50]}.jpg", File(img_file), save=True)
                        print(f"    üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è {game.title}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
                    finally:
                        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                        try:
                            os.unlink(image_path)
                        except:
                            pass
                
                new_games.append(game)
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞: {game_data['title']}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã {game_data.get('title')}: {e}")
                self.stats['errors'] += 1
                continue
        
        return new_games
    
    def _print_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ê–†–°–ò–ù–ì–ê:")
        print(f"   üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {self.stats['total_pages_loaded']}")
        print(f"   üîó –ù–∞–π–¥–µ–Ω–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏–≥—Ä—ã: {self.stats['game_links_found']}")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –∏–≥—Ä: {self.stats['games_parsed']}")
        print(f"   ‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–≥—Ä —Å –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏: {self.stats['invalid_platform_skipped']}")
        print(f"   ‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–≥—Ä —Å –¥–∞—Ç–æ–π –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {self.stats['too_far_skipped']}")
        print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {self.stats['games_saved']}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")


# –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def run_parser():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä"""
    parser = IGNReleaseParser()
    return parser.parse_releases()

def get_parser_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–≥—Ä–∞–º –≤ –ë–î"""
    total_games = GameRelease.objects.count()
    upcoming_games = GameRelease.objects.filter(
        release_date__gte=timezone.now().date()
    ).count()
    published_games = GameRelease.objects.filter(is_published=True).count()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    platform_stats = {}
    for game in GameRelease.objects.all():
        for platform in game.get_platforms_list():
            platform_stats[platform] = platform_stats.get(platform, 0) + 1
    
    return {
        'total_games': total_games,
        'upcoming_games': upcoming_games,
        'published_games': published_games,
        'platform_stats': platform_stats  # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    }