from django import forms
from django.contrib.auth.forms import PasswordChangeForm
from .models import *
import re

class UserEditForm(forms.ModelForm):
    # –ü–æ–ª–µ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏)
    new_password = forms.CharField(
        label='–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å',
        required=False,
        widget=forms.PasswordInput(attrs={
            'class': 'form-control',
            'placeholder': '–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –º–µ–Ω—è–µ—Ç–µ –ø–∞—Ä–æ–ª—å'
        }),
        help_text='–ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤'
    )
    
    telegram_username = forms.CharField(
        label='–ù–∏–∫ –≤ Telegram',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '@username'
        })
    )
    
    tags = forms.CharField(
        label='–¢–µ–≥–∏ –∏ –Ω–∞–≤—ã–∫–∏',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–¥–∏–∑–∞–π–Ω, –≤–µ—Ä—Å—Ç–∫–∞, –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥...'
        })
    )

    class Meta:
        model = CustomUser
        fields = ['username', 'first_name', 'email', 'telegram_username', 'tags', 
                 'role', 'manager', 'balance', 'new_password']
        widgets = {
            'username': forms.TextInput(attrs={'class': 'form-control'}),
            'first_name': forms.TextInput(attrs={'class': 'form-control'}), 
            'email': forms.EmailInput(attrs={'class': 'form-control'}),
            'balance': forms.NumberInput(attrs={'class': 'form-control', 'step': '0.01'}),
            'role': forms.Select(attrs={'class': 'form-control'}),
            'manager': forms.Select(attrs={'class': 'form-control'}),
        }

    def __init__(self, *args, **kwargs):
        self.editing_user = kwargs.pop('editing_user', None)  # –ö—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç
        super().__init__(*args, **kwargs)
        
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–±–∏—Ä–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö
        if self.instance.pk:
            self.fields['new_password'].required = False
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–ª—å–∫–æ boss'–∞–º–∏
        if 'manager' in self.fields:
            self.fields['manager'].queryset = CustomUser.objects.filter(role='boss')
            self.fields['manager'].required = False
            self.fields['manager'].empty_label = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –ø–æ–ª—è–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—â–µ–≥–æ
        if self.editing_user:
            if self.editing_user.role == 'manager':
                # –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ä–æ–ª—å –∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                if 'role' in self.fields:
                    del self.fields['role']
                if 'manager' in self.fields:
                    del self.fields['manager']
            
            # –ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–æ–ª—å
            if self.instance == self.editing_user and 'role' in self.fields:
                del self.fields['role']

    def clean_telegram_username(self):
        telegram_username = self.cleaned_data.get('telegram_username', '').strip()
        if telegram_username:
            if telegram_username.startswith('@'):
                telegram_username = telegram_username[1:]
            if not re.match(r'^[a-zA-Z0-9_]{5,32}$', telegram_username):
                raise forms.ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram username')
        return telegram_username

    def clean_tags(self):
        tags = self.cleaned_data.get('tags', '').strip()
        if tags:
            tags_list = [tag.strip() for tag in tags.split(',') if tag.strip()]
            if len(tags_list) > 10:
                raise forms.ValidationError('–ù–µ –±–æ–ª–µ–µ 10 —Ç–µ–≥–æ–≤')
            return ', '.join(tags_list)
        return tags

    def clean_new_password(self):
        password = self.cleaned_data.get('new_password')
        if password and len(password) < 8:
            raise forms.ValidationError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤')
        return password

    def clean(self):
        cleaned_data = super().clean()
        editing_user = self.editing_user
        target_user = self.instance
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        if 'role' in cleaned_data and editing_user:
            new_role = cleaned_data.get('role')
            if editing_user.role != 'boss':
                raise forms.ValidationError('–¢–æ–ª—å–∫–æ –±–æ—Å—Å –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            
            # –ù–µ–ª—å–∑—è –ø–æ–Ω–∏–∑–∏—Ç—å –±–æ—Å—Å–∞
            if target_user.role == 'boss' and new_role != 'boss':
                raise forms.ValidationError('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –±–æ—Å—Å–∞')

    def save(self, commit=True):
        user = super().save(commit=False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π
        new_password = self.cleaned_data.get('new_password')
        if new_password:
            user.set_password(new_password)
        
        if commit:
            user.save()
        return user
# forms.py
class TaskForm(forms.ModelForm):
    due_date = forms.DateField(
        label='üìÖ –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
        widget=forms.DateInput(attrs={
            'type': 'date',
            'class': 'form-control',
            'placeholder': '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É'
        })
    )
    
    payment_amount = forms.DecimalField(
        label='üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ (—Ä—É–±.)',
        max_digits=10,
        decimal_places=2,
        initial=0,
        widget=forms.NumberInput(attrs={
            'class': 'form-control',
            'placeholder': '0.00',
            'step': '0.01',
            'min': '0'
        })
    )
    
    tags = forms.CharField(
        label='üè∑Ô∏è –Ø—Ä–ª—ã–∫–∏ –∑–∞–¥–∞—á–∏',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '—Å—Ä–æ—á–Ω–æ, –≤–∞–∂–Ω–æ–µ, –¥–∏–∑–∞–π–Ω...'
        }),
        help_text='–£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
    )

    class Meta:
        model = Task
        fields = ['title', 'description', 'assigned_to', 'due_date', 'payment_amount', 'tags', 'controlled_by']
        widgets = {
            'title': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'
            }),
            'description': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': '–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...'
            }),
            'assigned_to': forms.Select(attrs={'class': 'form-control'}),
            'controlled_by': forms.Select(attrs={'class': 'form-control'}),
        }
    
    def __init__(self, *args, **kwargs):
        self.request = kwargs.pop('request', None)
        super().__init__(*args, **kwargs)
        
        if self.request and self.request.user.is_authenticated:
            user = self.request.user
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –Ω–µ staff)
            if user.role == 'boss':
                users = CustomUser.objects.filter(is_staff=False, is_active=True)
            elif user.role == 'manager':
                users = user.get_team_users().filter(is_staff=False, is_active=True)
            else:
                users = CustomUser.objects.filter(id=user.id, is_staff=False, is_active=True)
            
            self.fields['assigned_to'].queryset = users

            # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ boss –∏ manager)
            self.fields['controlled_by'].queryset = user.get_team_users().filter(
                is_active=True, 
                role__in=['boss', 'manager']
            )
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ boss/manager - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if user.role not in ['boss']:
                boss = user.manager if user.manager else user.get_team_users().filter(role='boss').first()
                if boss:
                    self.fields['controlled_by'].initial = boss
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å boss/manager - –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º
            #if user.role in ['boss', 'manager']:
            #    self.fields['controlled_by'].required = False
            #    self.fields['controlled_by'].empty_label = "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

    def clean_tags(self):
        tags = self.cleaned_data.get('tags', '').strip()
        if tags:
            tags_list = [tag.strip() for tag in tags.split(',') if tag.strip()]
            if len(tags_list) > 10:
                raise forms.ValidationError('–ù–µ –±–æ–ª–µ–µ 10 —Ç–µ–≥–æ–≤')
            return ', '.join(tags_list)
        return tags

    def clean_payment_amount(self):
        payment_amount = self.cleaned_data.get('payment_amount')
        if payment_amount < 0:
            raise forms.ValidationError('–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π')
        return payment_amount
            

class UserForm(forms.ModelForm):
    password = forms.CharField(
        label='–ü–∞—Ä–æ–ª—å',
        widget=forms.PasswordInput(attrs={
            'class': 'form-control',
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
        }),
        help_text='–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤'
    )
    
    telegram_username = forms.CharField(
        label='–ù–∏–∫ –≤ Telegram',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '@username'
        }),
        help_text='–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
    )
    
    tags = forms.CharField(
        label='–¢–µ–≥–∏ –∏ –Ω–∞–≤—ã–∫–∏',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–¥–∏–∑–∞–π–Ω, –≤–µ—Ä—Å—Ç–∫–∞, –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥...'
        }),
        help_text='–£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
    )

    class Meta:
        model = CustomUser
        fields = ['username', 'first_name', 'email','role', 'telegram_username', 'tags', 'password']
        widgets = {
            'username': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω'
            }),
            'first_name': forms.TextInput(attrs={
                'class': 'form-control', 
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è'
            }),
            'email': forms.EmailInput(attrs={
                'class': 'form-control',
                'placeholder': 'email@example.com'
            }),
        }
        help_texts = {
            'username': '–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã @/./+/-/_',
            'email': '–ù–∞ —ç—Ç–æ—Ç email –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        }
    def __init__(self, *args, **kwargs):
        self.editing_user = kwargs.pop('editing_user', None)  # –ö—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç
        super().__init__(*args, **kwargs)
        
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É–±–∏—Ä–∞–µ–º –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö
        if self.instance.pk:
            self.fields['new_password'].required = False
    def clean_telegram_username(self):
        telegram_username = self.cleaned_data.get('telegram_username', '').strip()
        if telegram_username:
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
            if telegram_username.startswith('@'):
                telegram_username = telegram_username[1:]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            if not re.match(r'^[a-zA-Z0-9_]{5,32}$', telegram_username):
                raise forms.ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram username')
        return telegram_username

    def clean_tags(self):
        tags = self.cleaned_data.get('tags', '').strip()
        if tags:
            # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏
            tags_list = [tag.strip() for tag in tags.split(',') if tag.strip()]
            if len(tags_list) > 10:
                raise forms.ValidationError('–ù–µ –±–æ–ª–µ–µ 10 —Ç–µ–≥–æ–≤')
            return ', '.join(tags_list)
        return tags

    def clean_password(self):
        password = self.cleaned_data.get('password')
        if len(password) < 8:
            raise forms.ValidationError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤')
        return password
    def clean(self):
        cleaned_data = super().clean()
        editing_user = self.editing_user
        target_user = self.instance
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏
        if 'role' in cleaned_data and editing_user:
            new_role = cleaned_data.get('role')
            if editing_user.role != 'boss':
                raise forms.ValidationError('–¢–æ–ª—å–∫–æ –±–æ—Å—Å –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
            
            # –ù–µ–ª—å–∑—è –ø–æ–Ω–∏–∑–∏—Ç—å –±–æ—Å—Å–∞
            if target_user.role == 'boss' and new_role != 'boss':
                raise forms.ValidationError('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –±–æ—Å—Å–∞')
    def save(self, commit=True):
        user = super().save(commit=False)
        user.set_password(self.cleaned_data['password'])
        if commit:
            user.save()
        return user

class PaymentForm(forms.ModelForm):
    class Meta:
        model = Payment
        fields = ['employee', 'amount', 'description']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 3}),
        }


class CustomPasswordChangeForm(PasswordChangeForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # –£–ª—É—á—à–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.fields['new_password1'].help_text = """
            –í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, 
            –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç—ã–º –∏–ª–∏ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.
        """
        
        # –°—Ç–∏–ª–∏–∑—É–µ–º –ø–æ–ª—è
        for field_name in self.fields:
            field = self.fields[field_name]
            field.widget.attrs.update({
                'class': 'form-control',
                'placeholder': f'–í–≤–µ–¥–∏—Ç–µ {field.label.lower()}'
            })

            
class InvitationForm(forms.Form):
    tags = forms.CharField(label='–Ø—Ä–ª—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', required=False, 
                          widget=forms.TextInput(attrs={'placeholder': '–¥–∏–∑–∞–π–Ω, –≤–µ—Ä—Å—Ç–∫–∞, –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥...'}))
    
class UserRegistrationForm(forms.ModelForm):
    password1 = forms.CharField(label='–ü–∞—Ä–æ–ª—å', widget=forms.PasswordInput)
    password2 = forms.CharField(label='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è', widget=forms.PasswordInput)
    telegram_username = forms.CharField(label='–ù–∏–∫ –≤ Telegram (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', required=False)
    
    class Meta:
        model = CustomUser
        fields = ['username', 'first_name', 'telegram_username']
    
    def clean_password2(self):
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return password2

class UserProfileForm(forms.ModelForm):
    avatar = forms.ImageField(label='–ê–≤–∞—Ç–∞—Ä', required=False, widget=forms.FileInput)
    
    class Meta:
        model = CustomUser
        fields = ['username', 'first_name', 'telegram_username', 'avatar', 'email']
        widgets = {
            'username': forms.TextInput(attrs={'class': 'form-control'}),
            'first_name': forms.TextInput(attrs={'class': 'form-control'}),
            'telegram_username': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '@username'}),
            'email': forms.EmailInput(attrs={'class': 'form-control'}),
        }

class NavigationButtonForm(forms.ModelForm):
    class Meta:
        model = NavigationButton
        fields = ['title', 'url', 'icon', 'color', 'order', 'is_active']
        widgets = {
            'title': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '–ù–∞–ø—Ä–∏–º–µ—Ä: Google –î–∏—Å–∫'}),
            'url': forms.URLInput(attrs={'class': 'form-control', 'placeholder': 'https://drive.google.com/'}),
            'icon': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '–Ω–∞–ø—Ä–∏–º–µ—Ä, üöÄ –∏–ª–∏ üìÅ –∏–ª–∏ üîó'}),
            'color': forms.TextInput(attrs={'class': 'form-control', 'type': 'color'}),
            'order': forms.NumberInput(attrs={'class': 'form-control'}),
            'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
        }
        help_texts = {
            'icon': '–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç',
            'color': '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏',
        }