from django import forms
from django.contrib.auth.forms import PasswordChangeForm
from .models import *
import re

class TaskForm(forms.ModelForm):
    class Meta:
        model = Task
        fields = ['title', 'description', 'assigned_to', 'due_date', 'payment_amount']
        widgets = {
            'due_date': forms.DateInput(attrs={'type': 'date'}),
            'description': forms.Textarea(attrs={'rows': 4}),
        }

class UserForm(forms.ModelForm):
    password = forms.CharField(
        label='–ü–∞—Ä–æ–ª—å',
        widget=forms.PasswordInput(attrs={
            'class': 'form-control',
            'placeholder': '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
        }),
        help_text='–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤'
    )
    
    telegram_username = forms.CharField(
        label='–ù–∏–∫ –≤ Telegram',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '@username'
        }),
        help_text='–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ'
    )
    
    tags = forms.CharField(
        label='–¢–µ–≥–∏ –∏ –Ω–∞–≤—ã–∫–∏',
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': '–¥–∏–∑–∞–π–Ω, –≤–µ—Ä—Å—Ç–∫–∞, –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥...'
        }),
        help_text='–£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é'
    )

    class Meta:
        model = CustomUser
        fields = ['username', 'first_name', 'email', 'telegram_username', 'tags', 'password']
        widgets = {
            'username': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω'
            }),
            'first_name': forms.TextInput(attrs={
                'class': 'form-control', 
                'placeholder': '–í–≤–µ–¥–∏—Ç–µ –∏–º—è'
            }),
            'email': forms.EmailInput(attrs={
                'class': 'form-control',
                'placeholder': 'email@example.com'
            }),
        }
        help_texts = {
            'username': '–¢–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª—ã @/./+/-/_',
            'email': '–ù–∞ —ç—Ç–æ—Ç email –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
        }

    def clean_telegram_username(self):
        telegram_username = self.cleaned_data.get('telegram_username', '').strip()
        if telegram_username:
            # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –≤–≤–µ–ª
            if telegram_username.startswith('@'):
                telegram_username = telegram_username[1:]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
            if not re.match(r'^[a-zA-Z0-9_]{5,32}$', telegram_username):
                raise forms.ValidationError('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Telegram username')
        return telegram_username

    def clean_tags(self):
        tags = self.cleaned_data.get('tags', '').strip()
        if tags:
            # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–≥–∏
            tags_list = [tag.strip() for tag in tags.split(',') if tag.strip()]
            if len(tags_list) > 10:
                raise forms.ValidationError('–ù–µ –±–æ–ª–µ–µ 10 —Ç–µ–≥–æ–≤')
            return ', '.join(tags_list)
        return tags

    def clean_password(self):
        password = self.cleaned_data.get('password')
        if len(password) < 8:
            raise forms.ValidationError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤')
        return password

    def save(self, commit=True):
        user = super().save(commit=False)
        user.set_password(self.cleaned_data['password'])
        if commit:
            user.save()
        return user

class PaymentForm(forms.ModelForm):
    class Meta:
        model = Payment
        fields = ['employee', 'amount', 'description']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 3}),
        }


class CustomPasswordChangeForm(PasswordChangeForm):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        
        # –£–ª—É—á—à–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.fields['new_password1'].help_text = """
            –í–∞—à –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, 
            –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –ø—Ä–æ—Å—Ç—ã–º –∏–ª–∏ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä.
        """
        
        # –°—Ç–∏–ª–∏–∑—É–µ–º –ø–æ–ª—è
        for field_name in self.fields:
            field = self.fields[field_name]
            field.widget.attrs.update({
                'class': 'form-control',
                'placeholder': f'–í–≤–µ–¥–∏—Ç–µ {field.label.lower()}'
            })

            
class InvitationForm(forms.Form):
    tags = forms.CharField(label='–Ø—Ä–ª—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)', required=False, 
                          widget=forms.TextInput(attrs={'placeholder': '–¥–∏–∑–∞–π–Ω, –≤–µ—Ä—Å—Ç–∫–∞, –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥...'}))
    
class UserRegistrationForm(forms.ModelForm):
    password1 = forms.CharField(label='–ü–∞—Ä–æ–ª—å', widget=forms.PasswordInput)
    password2 = forms.CharField(label='–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è', widget=forms.PasswordInput)
    telegram_username = forms.CharField(label='–ù–∏–∫ –≤ Telegram (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', required=False)
    
    class Meta:
        model = CustomUser
        fields = ['username', 'first_name', 'telegram_username']
    
    def clean_password2(self):
        password1 = self.cleaned_data.get("password1")
        password2 = self.cleaned_data.get("password2")
        if password1 and password2 and password1 != password2:
            raise forms.ValidationError("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return password2

class UserProfileForm(forms.ModelForm):
    avatar = forms.ImageField(label='–ê–≤–∞—Ç–∞—Ä', required=False, widget=forms.FileInput)
    
    class Meta:
        model = CustomUser
        fields = ['username', 'first_name', 'telegram_username', 'avatar', 'email']
        widgets = {
            'username': forms.TextInput(attrs={'class': 'form-control'}),
            'first_name': forms.TextInput(attrs={'class': 'form-control'}),
            'telegram_username': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '@username'}),
            'email': forms.EmailInput(attrs={'class': 'form-control'}),
        }

class NavigationButtonForm(forms.ModelForm):
    class Meta:
        model = NavigationButton
        fields = ['title', 'url', 'icon', 'color', 'order', 'is_active']
        widgets = {
            'title': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '–ù–∞–ø—Ä–∏–º–µ—Ä: Google –î–∏—Å–∫'}),
            'url': forms.URLInput(attrs={'class': 'form-control', 'placeholder': 'https://drive.google.com/'}),
            'icon': forms.TextInput(attrs={'class': 'form-control', 'placeholder': '–Ω–∞–ø—Ä–∏–º–µ—Ä, üöÄ –∏–ª–∏ üìÅ –∏–ª–∏ üîó'}),
            'color': forms.TextInput(attrs={'class': 'form-control', 'type': 'color'}),
            'order': forms.NumberInput(attrs={'class': 'form-control'}),
            'is_active': forms.CheckboxInput(attrs={'class': 'form-check-input'}),
        }
        help_texts = {
            'icon': '–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –∏–ª–∏ —Ç–µ–∫—Å—Ç',
            'color': '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏',
        }