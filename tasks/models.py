from django.contrib.auth.models import AbstractUser
from django.db import models
from django.utils import timezone

class CustomUser(AbstractUser):
    ROLE_CHOICES = [
        ('boss', '–ë–æ—Å—Å'),
        ('manager', '–ú–µ–Ω–µ–¥–∂–µ—Ä'), 
        ('technician', '–¢–µ—Ö–Ω–∏–∫'),
    ]

    manager = models.ForeignKey('self', on_delete=models.SET_NULL, null=True, blank=True, 
                               limit_choices_to={'is_staff': True}, related_name='subordinates')
    balance = models.DecimalField(max_digits=10, decimal_places=2, default=0.00, verbose_name='–ë–∞–ª–∞–Ω—Å')
    tags = models.CharField(max_length=500, blank=True, verbose_name='–Ø—Ä–ª—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')
    telegram_username = models.CharField(max_length=100, blank=True, verbose_name='–ù–∏–∫ –≤ Telegram')
    avatar = models.ImageField(upload_to='avatars/', null=True, blank=True, verbose_name='–ê–≤–∞—Ç–∞—Ä')
    
    # –£–±–∏—Ä–∞–µ–º —Ñ–∞–º–∏–ª–∏—é –∏–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö
    first_name = models.CharField(max_length=30, blank=True, verbose_name='–ò–º—è')
    last_name = models.CharField(max_length=150, blank=True, verbose_name='–§–∞–º–∏–ª–∏—è')  # –î–µ–ª–∞–µ–º –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π
    role = models.CharField(
        max_length=20, 
        choices=ROLE_CHOICES, 
        default='technician',
        verbose_name='–†–æ–ª—å',
        blank=True,
        null=True
    )

    def get_display_name(self):
        return self.first_name or self.username
    
    def get_tags_list(self):
        return [tag.strip() for tag in self.tags.split(',')] if self.tags else []
    
    def __str__(self):
        return self.get_display_name()
    def get_avatar_url(self):
        if self.avatar and hasattr(self.avatar, 'url'):
            return self.avatar.url
        return None
    def is_boss(self):
        return self.role == 'boss'
    
    def is_manager(self):
        return self.role == 'manager'
    
    def is_technician(self):
        return self.role == 'technician' or not self.role
class Task(models.Model):
    STATUS_CHOICES = [
        ('created', '–°–æ–∑–¥–∞–Ω–∞'),
        ('in_progress', '–í –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏'),
        ('submitted', '–°–¥–∞–Ω–∞ –Ω–∞ –æ—Ç—á–µ—Ç'),
        ('completed', '–í—ã–ø–æ–ª–Ω–µ–Ω–∞'),
    ]

    title = models.CharField(max_length=200, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ')
    description = models.TextField(verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ')
    assigned_to = models.ForeignKey(CustomUser, on_delete=models.CASCADE, 
                                   limit_choices_to={'is_staff': False},
                                   related_name='tasks', verbose_name='–°–æ—Ç—Ä—É–¥–Ω–∏–∫')
    due_date = models.DateField(verbose_name='–î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è')
    payment_amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ', default=0)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='created', verbose_name='–°—Ç–∞—Ç—É—Å')
    created_date = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏')
    started_date = models.DateTimeField(null=True, blank=True, verbose_name='–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã')  # –ù–û–í–û–ï –ü–û–õ–ï
    submitted_date = models.DateTimeField(null=True, blank=True, verbose_name='–î–∞—Ç–∞ —Å–¥–∞—á–∏ –Ω–∞ –æ—Ç—á–µ—Ç')
    created_by = models.ForeignKey(CustomUser, on_delete=models.CASCADE, 
                                  related_name='created_tasks', verbose_name='–ö–µ–º —Å–æ–∑–¥–∞–Ω–∞')
    tags = models.CharField(max_length=200, blank=True, verbose_name='–Ø—Ä–ª—ã–∫–∏ –∑–∞–¥–∞—á–∏')

    def __str__(self):
        return self.title

class Payment(models.Model):
    employee = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='payments_received', 
                                limit_choices_to={'is_staff': False})
    manager = models.ForeignKey(CustomUser, on_delete=models.CASCADE, related_name='payments_made')
    amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã')
    payment_date = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ –≤—ã–ø–ª–∞—Ç—ã')
    description = models.TextField(blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–ª–∞—Ç—ã')
    
    def save(self, *args, **kwargs):
        # –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤—ã–ø–ª–∞—Ç—ã —É–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        if not self.pk:
            self.employee.balance -= self.amount
            self.employee.save()
        super().save(*args, **kwargs)
    
    def __str__(self):
        return f"–í—ã–ø–ª–∞—Ç–∞ {self.amount} —Ä—É–±. –¥–ª—è {self.employee}"

class Invitation(models.Model):
    STATUS_CHOICES = [
        ('pending', '–û–∂–∏–¥–∞–µ—Ç'),
        ('accepted', '–ü—Ä–∏–Ω—è—Ç–∞'),
        ('expired', '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–∞'),
    ]

    token = models.CharField(max_length=100, unique=True, verbose_name='–¢–æ–∫–µ–Ω')
    created_by = models.ForeignKey(CustomUser, on_delete=models.CASCADE, verbose_name='–ö–µ–º —Å–æ–∑–¥–∞–Ω–æ')
    created_at = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    expires_at = models.DateTimeField(verbose_name='–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending', verbose_name='–°—Ç–∞—Ç—É—Å')
    accepted_by = models.ForeignKey(CustomUser, on_delete=models.SET_NULL, null=True, blank=True, 
                                   related_name='accepted_invitations', verbose_name='–ö–µ–º –ø—Ä–∏–Ω—è—Ç–æ')
    tags = models.CharField(max_length=500, blank=True, verbose_name='–Ø—Ä–ª—ã–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)')

    def is_expired(self):
        return timezone.now() > self.expires_at

    def __str__(self):
        return f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è {self.email}"



class NavigationButton(models.Model):
    title = models.CharField(max_length=100, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏')
    url = models.CharField(max_length=500, verbose_name='URL —Å—Å—ã–ª–∫–∞')
    icon = models.CharField(max_length=50, default='üîó', verbose_name='–ò–∫–æ–Ω–∫–∞')
    color = models.CharField(max_length=7, default='#2563eb', verbose_name='–¶–≤–µ—Ç –∫–Ω–æ–ø–∫–∏')
    order = models.IntegerField(default=0, verbose_name='–ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è')
    is_active = models.BooleanField(default=True, verbose_name='–ê–∫—Ç–∏–≤–Ω–∞')
    
    class Meta:
        ordering = ['order', 'title']
        verbose_name = '–ö–Ω–æ–ø–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'
        verbose_name_plural = '–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏'
    
    def __str__(self):
        return self.title